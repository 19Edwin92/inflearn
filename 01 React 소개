제1강

01 리액트는 무엇인가? 
리액트 공식사이트에서는 사용자 인터페이스를 위한 자바스크립트 라이브러리이다. 
여기서 라이브러리란 자주사용되는 기능들을 모아놓은 모음집을 말한다. 

사용자인터페이스(UI) 컴퓨터와 사용자 사이의 정보를 위한 창구이다. 
대표적인 것이 버튼을 통해서 사용자가 입력한 정보들의 소통이 이뤄지는 환경을 말한다. 
리액트는 이러한 UI 라이브러리 가운데 대표적인 하나의 모음집니다.  

- NGULARJS는 현재 지원종료(프레임워크) - 제어권한이 프레임워크에게 있다
- React 가장 유명한 라이브러리 - 제어권한이 개발자에게 있다.(현재, 핫하지만 언젠가 대체될 수 있다.)
- Vue 요즘 뜨는 라이브러리 - 제어권한이 개발자에게 있다.

SPA - Single Page Apprication 단일 페이지 애플리케이션
무수한 HTML을 양산하여 만든 웹페이지가 아니라 하나의 페이지에서 블록(컴포넌트)들로 내부를 디자인하며
화면을 구축하는 기술을 말하며, 리액트는 SPA를 만드는데 최적화된 라이브러리이다. 

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

02 리액트의 장점
첫째, 빠른 업데이트와 렌더링 속도 : 화면전환이 빠른 것을 말한다. 
리액트에서는 이를 위해서 Vitual DOM을 사용한다. 가상의 DOM이다. DOM은 웹페이지를 규정하는 객체이다. 
콘솔에 document를 검색하면 살펴볼 수 있다. Vitual DOM은 웹브라우저가 리렌더링 되었을 때, 전체를 변경하는 것이 아니라 필요한 부분만 수정하기에 빠른 방식으로 동작한다. 

둘재, 컴포넌트 기반
리액트에는 컴포넌트(구성요소)로 구성되어 있으며, 마치 미니 레고블록으로 만드는 것을 볼 수 있다. 
에이비엔비의 경우 A컴포넌트의 반복과 B컴포넌트의 반복으로 구성된다. 

이는 "재사용성"을 극대화한 것인데, 이는 전체 소프트웨어의 개발 기간이 단축된다는 이점이 있다. 
또한 유지 보수가 용이해진다는 점이다. 공통모듈이 문제가 되면 이 모델만 수정하면 되기 때문이다. 

리액트 역시 하나의 컴포넌트는 재사용성을 지원한다는 것이다. 

셋째, 든든한 지원군 Meta
오픈소스프로젝트이지만, 리액트는 Meta에서 시작한 프로젝트이며, 지속적인 관리를 받고 있다. 
Meta에서 프로젝트를 종료하지 않을 때까지 지속될 것 같다는 점이다. 
또한 활발한 지식공유와 커뮤니티가 존재한다는 것이기에, 바로 찾아서 볼 수 있다는 것이다. 

----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

03 리액트의 단점
리액트는 배워야 할 새로운 개념들이 많이 등장한다는 점이다. 그리고 계속 무언가 변환되기에 새로운 개념들이 계속 등장한다. 
그리고 이를 배워야 실무에서 사용할 수 있다. 

또한 높은 상태관리 복잡도(state) 때문에 그렇다. 성능최적화를 위해서는 state가 중요한데, 이 관리가 복잡하다. 

----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

2강은 HTML만으로 폴더의 index.html 에 기록해두었다. 해당부분으로 이동.

----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

01 create-react-app : cra
위 index.html으로 실습한 내용은 html에서 직접 React를 실행한 것이지만, 보통 웹사이트를 제작할 때에는 이러한 방식이 아니라,
cra를 통해서 직접 리액트 환경을 구축한다. 

이를 위해서는 Node.js v.14 npm 페키지를 설치해야 한다. 
터미널 : npx create-react-app 프로젝트명

----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------

03-1강 JSX 문법
JavaScript & Xml/HTML : 자바스크립트의 확장 문법을 뜻한다.  
const element = <h1>hello, world!</h1>;

대입연산자 왼쪽은 자바스크립트인데
오른쪽을 보면, HTMl 인 것을 볼 수 있다. 

대입된 값으로 HTML을 조작하는 것이다. 


그렇다면, JSX의 역할은 무엇일까? HTML을 자바스크립트로 변환하는 것이다. 이를 변환하는 것이 React.createElement 이다. 
 
React.createElement (소괄호) 안에 기록되는데 3가지 이다. 1) type, 2) [props] 3) [...childern]
이전 강의에서 버튼을 만들었던 내용과 함께 살펴보자. 

    #JSX를 사용한 코드
    const element = (
      <h1 className="greeting"> Hello, world!</h1> 
    )

    #JSX를 사용하지 않는 코드
    const element = React.createElement(
      'h1',
      {className: 'greeting'},
      'Hello, world'
    )

    #위의 동일한 2개의 코드의 결과로, 자바스크립트는 아래의 객체를 생성한다. 함수명이 create 'Element'
    const element = {
      type: 'h1',          // HTML의 태그
      props: {             // HTML 태그의 속성
              className: 'greeting',         
              childern: 'Hello, world!'    // Element가 가지고 있는 자식 엘리먼트
      }
    }

JSX는 필수는 아니지만, 생성성과 가독성 때문에, 권장된다.     

----------------------------------------------------------------------------------------------------------------------------------------------------------
03-2강 JSX 장점
첫째, 코드가 간결해진다. 
둘째, 가독성이 향상된다. 코드 상의 버그를 쉽게 발경한 수 있다. 

    #JSX사용
    <div> hello, {name} </div>
 
    #JSX 사용하지 않음
    React.createElement('div', null, 'Hello, ${name}');

셋째, 보안성이 올라간다. injection Attacks 방어

05강 JSX 사용법 = 보든 자바스크립트 지원 
자바스크립트 = HTML 만약 이 영역에서 JS를 사용하고 싶다면 {중괄호}를 통해서 사용이 가능하며, 이 괄호에는 JS의 함수를 사용해도 된다. HTML을 사용하기에 부모태그와 자식태그를 기록했듯, div 태그 내에 다른 태그모음을 넣었던 것이 가능해진다는 말이다. 

    #작성해보기 
    chapter03 > Book.js 파일로 넘어가서 작업하자. 


04강 Element에 대해서 다뤄봅시다. 
element 요소/성분, 리액트의 요소에 대해서 공식홈페이지는 리액티 앱의 가장 작은 건축요소라고 한다. 
리액트 요소는, 화면에서 보이는 것들을 기술하는 것이다. 

    #JSX사용
    const element = <div> hello, {name} </div>

리액트 요소는 자바스트맄트 객체 형태로 존재한다. 

    #JSX를 사용하지 않는 코드
    const element = React.createElement(
      'h1',  #태그
      {className: 'greeting'}, #태그명
      'Hello, world' #태그의 innerText, 또는 하위 태그들
    )

04강 Element의 불변성
한 번 생성된 요소는, 생성 후에는 childern이나 속성을 바꿀 수 없다는 것이다. 

테스트파일



